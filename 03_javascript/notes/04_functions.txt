functions are used to perform a specific task. we devide code into smaller reusable block to make code more easy to read and debug. They are called functions.

Syntax:
    function function_name(parameters/arguments)
    {
        function body/definition;
        ...;
    }
    function_name(); // function call.

    ex:
    function add() {
    let a = 10, b = 20;
    let c = a + b;
    console.log(c);
}
add();



--> function can even take parameters such that every time we can use dynamic inputs.
    function add(a, b){
        let c = a + b;
        console.log(c);
    }
    add(5, 3);
    add(10, 20);


--> we can assign default parameters in function prototype.
    function add(a, b= 25){
        let c = a + b;
        console.log(c);
    }
    add(5);


--> functions can even return the values. 


functions are called "first class citizen in JavaScript"

--> functions expressions : functions can be expressed  as a variable where an anonymous function named with variable is called function expression.



-- Arrow functions: Arrow functions are function expression with modern Syntax. if definition has only one statement, no need of braces or return keyword.


--> Callback functions:
    Callback functions are the functions that are given as parameter to another function.
    It is widely used for inter-functional dependency.
    Syntax:
        function function1()(){

        }

        function function2(x){
            x();
        }
        function2(function1);

    
---functions can be called itself immediately called IIFE(immediate Invoke function Expression).
    Syntax: (function () {
        //body
    })();
    These function should be written at the top of the code and it is used for security.

    --> JS functions also have a concept called "Closure". closure means, in a nested function, remembers outer function values ever after outer function execution ended.

    Closures are used for memorization technique.